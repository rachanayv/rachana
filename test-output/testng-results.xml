<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="0" total="1" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="982" started-at="2019-11-14T11:06:33Z" finished-at="2019-11-14T11:06:34Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="982" started-at="2019-11-14T11:06:33Z" finished-at="2019-11-14T11:06:34Z">
      <class name="loginalone">
        <test-method status="FAIL" signature="beforeTest()[pri:0, instance:loginalone@4cc0edeb]" name="beforeTest" is-config="true" duration-ms="0" started-at="2019-11-14T16:36:33Z" finished-at="2019-11-14T16:36:33Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[The driver executable does not exist: C:\Users\lekha.k.nair\Desktop\NewChromeDriver\chromedriver.exe]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: The driver executable does not exist: C:\Users\lekha.k.nair\Desktop\NewChromeDriver\chromedriver.exe
	at com.google.common.base.Preconditions.checkState(Preconditions.java:585)
	at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:146)
	at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:141)
	at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:35)
	at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:159)
	at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:355)
	at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:94)
	at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:123)
	at UtilityClass.openBrowser(UtilityClass.java:15)
	at loginalone.beforeTest(loginalone.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:515)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:216)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:143)
	at org.testng.TestRunner.beforeRun(TestRunner.java:631)
	at org.testng.TestRunner.run(TestRunner.java:599)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:368)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:363)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:321)
	at org.testng.SuiteRunner.run(SuiteRunner.java:270)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1284)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1209)
	at org.testng.TestNG.runSuites(TestNG.java:1124)
	at org.testng.TestNG.run(TestNG.java:1096)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="SKIP" signature="login(java.lang.String, java.lang.String)[pri:0, instance:loginalone@4cc0edeb]" name="login" duration-ms="1" started-at="2019-11-14T16:36:34Z" data-provider="loginDp" finished-at="2019-11-14T16:36:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[tutorial]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[tutorial]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="SKIP" signature="afterTest()[pri:0, instance:loginalone@4cc0edeb]" name="afterTest" is-config="true" duration-ms="0" started-at="2019-11-14T16:36:34Z" finished-at="2019-11-14T16:36:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- loginalone -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
